training2 <- Caravan_subset2[-c(1:1000), ]
Caravan_subset2 <- Caravan %>% select(c(1:13, Purchase))
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
Caravan_subset2 <- Caravan %>% select(c(1:20, Purchase))
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
Caravan_subset2 <- Caravan %>% select(c(1:25, Purchase))
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
Caravan_subset2 <- Caravan %>% select(c(1:31, Purchase))
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
Caravan_subset2 <- Caravan %>% select(c(1:28, Purchase))
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
Caravan_subset2 <- Caravan %>% select(c(1:30, Purchase))
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
Caravan_subset2 <- Caravan %>% select(c(1:31, Purchase))
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
Caravan_subset2 <- Caravan %>% select(c(1:30, 42, Purchase))
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
caravan_subset <- "Nr Name Description Domain
1,MOSTYPE Customer Subtype see L0
2,MAANTHUI Number of houses 1 – 10
3,MGEMOMV Avg size household 1 – 6
4,MGEMLEEF Avg age see L1
5,MOSHOOFD Customer main type see L2
6,MGODRK Roman catholic see L3
7,MGODPR Protestant
8,MGODOV Other religion
9,MGODGE No religion
10,MRELGE Married
11,MRELSA Living together
12,MRELOV Other relation
13,MFALLEEN Singles
14,MFGEKIND Household without children
15,MFWEKIND Household with children
16,MOPLHOOG High level education
17,MOPLMIDD Medium level education
18,MOPLLAAG Lower level education
19,MBERHOOG High status
20,MBERZELF Entrepreneur
21,MBERBOER Farmer
22,MBERMIDD Middle management
23,MBERARBG Skilled labourers
24,MBERARBO Unskilled labourers
25,MSKA Social class A
26,MSKB1 Social class B1
27,MSKB2 Social class B2
28,MSKC Social class C
29,MSKD Social class D
30,MHHUUR Rented house"
df <- read.delim(textConnection(caravan_subset), header = TRUE, sep = ",", strip.white = TRUE)
cols <- levels(df[, 'V1'])
caravan_subset <- data.frame(sapply(cols, function(x) {df['V2'][df['V1'] == x]}, USE.NAMES = TRUE))
cols <- levels(df[, 'Nr'])
caravan_subset <- data.frame(sapply(cols, function(x) {df['Name'][df['Nr'] == x]}, USE.NAMES = TRUE))
df <- read.delim(textConnection(caravan_subset), header = TRUE, sep = ",", strip.white = TRUE)
View(df)
caravan_subset <- "Nr Name Description Domain
,1,MOSTYPE Customer Subtype see L0
,2,MAANTHUI Number of houses 1 – 10
,3,MGEMOMV Avg size household 1 – 6
,4,MGEMLEEF Avg age see L1
,5,MOSHOOFD Customer main type see L2
,6,MGODRK Roman catholic see L3
,7,MGODPR Protestant
,8,MGODOV Other religion
,9,MGODGE No religion
,10,MRELGE Married
,11,MRELSA Living together
,12,MRELOV Other relation
,13,MFALLEEN Singles
,14,MFGEKIND Household without children
,15,MFWEKIND Household with children
,16,MOPLHOOG High level education
,17,MOPLMIDD Medium level education
,18,MOPLLAAG Lower level education
,19,MBERHOOG High status
,20,MBERZELF Entrepreneur
,21,MBERBOER Farmer
,22,MBERMIDD Middle management
,23,MBERARBG Skilled labourers
,24,MBERARBO Unskilled labourers
,25,MSKA Social class A
,26,MSKB1 Social class B1
,27,MSKB2 Social class B2
,28,MSKC Social class C
,29,MSKD Social class D
,30,MHHUUR Rented house"
df <- read.delim(textConnection(caravan_subset), header = TRUE, sep = ",", strip.white = TRUE)
df <- read.delim(textConnection(caravan_subset), header = TRUE, sep = ",", strip.white = TRUE)
caravan_subset <- "Nr Name
1,MOSTYPE Customer Subtype see L0
2,MAANTHUI Number of houses 1 – 10
3,MGEMOMV Avg size household 1 – 6
4,MGEMLEEF Avg age see L1
5,MOSHOOFD Customer main type see L2
6,MGODRK Roman catholic see L3
7,MGODPR Protestant
8,MGODOV Other religion
9,MGODGE No religion
10,MRELGE Married
11,MRELSA Living together
12,MRELOV Other relation
13,MFALLEEN Singles
14,MFGEKIND Household without children
15,MFWEKIND Household with children
16,MOPLHOOG High level education
17,MOPLMIDD Medium level education
18,MOPLLAAG Lower level education
19,MBERHOOG High status
20,MBERZELF Entrepreneur
21,MBERBOER Farmer
22,MBERMIDD Middle management
23,MBERARBG Skilled labourers
24,MBERARBO Unskilled labourers
25,MSKA Social class A
26,MSKB1 Social class B1
27,MSKB2 Social class B2
28,MSKC Social class C
29,MSKD Social class D
30,MHHUUR Rented house"
df <- read.delim(textConnection(caravan_subset), header = TRUE, sep = ",", strip.white = TRUE)
View(df)
cols <- levels(df[, c('Nr', 'Name'])
cols <- levels(df[, c('Nr', 'Name')])
library(knitr, quietly = TRUE)
kable(df, format = "html", pad = 0)
Caravan_subset2 <- Caravan %>% select(c(1:30, Purchase))
str(Caravan_subset2)
# Use first 1000 observations for testing and remaining for training
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
fit_bart <- bartMachine(X = training2, y = training2$Purchase, mem_cache_for_speed = FALSE, seed = 1234)
yhat_bart <- predict(fit_bart, new_data = testing2, type = "class")
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
yhat_qda <- predict(fit_qda, newdata = testing, type = "class")
yhat_qda <- predict(fit_qda, newdata = testing, type = "response")
yhat_qda <- predict(fit_qda, newdata = testing)
yhat_qda <- predict(fit_qda, newdata = testing)$class
yhat_qda <- predict(fit_qda, newdata = testing, type = "class")
yhat_qda <- predict(fit_qda, newdata = testing, type = "class")
yhat_qda <- predict(fit_qda, newdata = testing2, type = "class")
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
yhat_qda <- predict(fit_qda, newdata = testing2, type = "class")
yhat_qda <- predict(fit_qda, newdata = testing2, type = "response")
training2 <- Caravan_subset2[-c(1:1000), ]
testing2 <- Caravan_subset2[1:1000, ]
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
yhat_qda <- predict(fit_qda, newdata = testing2, type = "response")
yhat_qda <- predict(fit_qda, newdata = testing2, type = "class")
yhat_qda <- predict(fit_qda, newdata = testing2)$class
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
fit_qda
str(fit_qda)
fit_qda_unlist <- unlist(fit_qda)
yhat_qda <- predict(fit_qda, testing2)$class
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
yhat_qda <- predict(fit_qda, testing2)$class
yhat_qda <- MASS::predict(fit_qda, testing2)$class
extract(fit_qda)
model.matrix(fit_qda)
typeof(fit_qda)
yhat_qda <- predict(fit_qda@model, testing2)$class
yhat_qda <- predict(fit_qda@model, testing2)
yhat_qda <- predict(fit_qda@model, testing2, type = "class")
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda", task = "class")
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda", task = class)
yhat_qda <- predict(fit_qda@formula, testing2, type = "class")
yhat_qda <- predict(fit_qda@formula, testing2, type = "formula")
yhat_qda <- predict(fit_qda@formula, testing2, type = "model")
typeof(fit_qda@model)
fit_qda@model
typeof(fit_qda@formula)
typeof(fit_qda@object$prior)
yhat_qda <- predict(fit_qda@object$prior, testing2, type = "class")
typeof(fit_qda@object$xlevels)
summary(fit_qda)
summary(fit_qda@object)
yhat_qda <- predict.qda(fit_qda@object, testing2, prior = fit_qda@object$prior)
suppressPackageStartupMessages(library(MASS))
yhat_qda <- predict.qda(fit_qda@object, testing2, prior = fit_qda@object$prior)
suppressPackageStartupMessages(library(MASS))
library(MASS)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
suppressPackageStartupMessages(library(MASS))
yhat_qda <- predict.qda(fit_qda@object, testing2, prior = fit_qda@object$prior)
yhat_qda <- predict(fit_qda@object, testing2, prior = fit_qda@object$prior)
prop.table(table(testing2$Purchase, yhat_bart))
prop.table(table(testing2$Purchase, yhat_qda))
yhat_qda <- predict(fit_qda, testing2, prior = fit_qda@object$prior)
prop.table(table(testing2$Purchase, yhat_bart))
prop.table(table(testing2$Purchase, yhat_qda))
yhat_qda <- predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)
prop.table(table(testing2$Purchase, yhat_bart))
prop.table(table(testing2$Purchase, yhat_qda))
table(testing2$Purchase, yhat_bart)
View(df)
caravan_subset <- "Name
1,MOSTYPE Customer Subtype see L0
2,MAANTHUI Number of houses 1 – 10
3,MGEMOMV Avg size household 1 – 6
4,MGEMLEEF Avg age see L1
5,MOSHOOFD Customer main type see L2
6,MGODRK Roman catholic see L3
7,MGODPR Protestant
8,MGODOV Other religion
9,MGODGE No religion
10,MRELGE Married
11,MRELSA Living together
12,MRELOV Other relation
13,MFALLEEN Singles
14,MFGEKIND Household without children
15,MFWEKIND Household with children
16,MOPLHOOG High level education
17,MOPLMIDD Medium level education
18,MOPLLAAG Lower level education
19,MBERHOOG High status
20,MBERZELF Entrepreneur
21,MBERBOER Farmer
22,MBERMIDD Middle management
23,MBERARBG Skilled labourers
24,MBERARBO Unskilled labourers
25,MSKA Social class A
26,MSKB1 Social class B1
27,MSKB2 Social class B2
28,MSKC Social class C
29,MSKD Social class D
30,MHHUUR Rented house"
df <- read.delim(textConnection(caravan_subset), header = TRUE, sep = ",", strip.white = TRUE)
# load in Caravan dataset
suppressPackageStartupMessages(library(ISLR))
data("Caravan", package = "ISLR")
suppressPackageStartupMessages(library(dplyr))
# remove obscure variables
Caravan_subset2 <- Caravan %>% select(c(1:30, Purchase))
str(Caravan_subset2)
# Use first 1000 observations for testing and remaining for training
testing2 <- Caravan_subset2[1:1000, ]
training2 <- Caravan_subset2[-c(1:1000), ]
suppressPackageStartupMessages(library(bartMachine))
set_bart_machine_num_cores(parallel::detectCores())
# Model individual purchased insurance (Purchase) as function of all other variables using bart
fit_bart <- bartMachine(X = training2, y = training2$Purchase, mem_cache_for_speed = FALSE, seed = 1234)
yhat_bart <- predict(fit_bart, new_data = testing2, type = "class")
# fit function in the rminer package with model specified as “qda” using the same predictors
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
suppressPackageStartupMessages(library(MASS))
yhat_qda <- predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)
prop.table(table(testing2$Purchase, yhat_bart))
prop.table(table(testing2$Purchase, yhat_qda))
suppressPackageStartupMessages(library(MASS))
yhat_qda <- predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)
fit_qda <- rminer::fit(Purchase ~ ., data = training2, model = "qda")
yhat_qda <- predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)
yhat_qda <- predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)
yhat_qda <- predict(fit_qda@object, newdata = testing2, prior = fit_qda@object$prior)
prop.table(table(testing2$Purchase, yhat_bart))
prop.table(table(testing2$Purchase, yhat_qda))
yhat_qda <- predict(fit_qda@object, newdata = testing2, prior = fit_qda@object$prior)
prop.table(table(testing2$Purchase, yhat_bart))
prop.table(table(testing2$Purchase, yhat_qda))
yhat_qda <- predict(fit_qda@object, newdata = testing2, prior = fit_qda@object$prior)
yhat_qda <- predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)
yhat_qda <- predict(fit_qda@object, newdata = testing2, prior = fit_qda@object$prior)
prop.table(table(testing2$Purchase, yhat_qda$posterior))
table((testing2$Purchase)
)
table(yhat_qda$posterior)
yhat_qda <- predict.qda(fit_qda, newdata = testing2, prior = fit_qda@object$prior)
yhat_qda <- MASS::predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)
yhat_qda <- MASS::predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)$class
yhat_qda <- predict(fit_qda, newdata = testing2, prior = fit_qda@object$prior)$class
yhat_qda <- predict(fit_qda@object, newdata = testing2, prior = fit_qda@object$prior)
yhat_qda <- predict(fit_qda@object, newdata = testing2, prior = fit_qda@object$prior)$class
prop.table(table(testing2$Purchase, yhat_qda))
n <- 1000
p_1 <- .5
p_2 <- .55
n_1 <- n/2
n_2 <- n/2
se <- sqrt(p_1*(1-p_1)/n_1 + p_2*(1-p_2)/n_2)
print(se)
n_new <- n*(se/.05)^2
print(round(n_new))
-11+51
1.1-.5
library(arm)
invlogit(1)
invlogit(0.46*0.5 - 0.9)
invlogit(0.46 - 0.9)
a <- invlogit(0.46*0.5 - 0.9)
b <- invlogit(0.46 - 0.9)
a-b
b-a
invlogit(.04)
invlogit(.04*.5)
.04/4
n <- 100
n <- 100
2000/1.5
1/1.5
1/1.5 *(1/2000)
1000/3000
n*(1/3)
n*(2/3)
66*1.5
66/1.5
44 / 66
66/44
n-44
se_men <- (0.1-0.9)/44
se_women <- (0.2-0.8) / 66
se_all <- sqrt(1.5^2*se_men + se_women)
se_women <- (0.2-0.8) / 66
se_all <- sqrt(1.5^2*se_men + se_women)
se_women <- (0.2-0.8) / 66
se_men <- (0.1-0.9)/44
se_men
(1.5^2)*se_men
se_women
se_all <- sqrt((1.5^2)*se_men + se_women)
(1.5^2)*se_men + se_women
se_men <- (0.1*0.9)/44
se_women <- (0.2*0.8) / 66
se_all <- sqrt((1.5^2)*se_men + se_women)
se_all
n-44
se_women <- (0.2*0.8) / 56
se_all <- sqrt((1.5^2)*se_men + se_women)
se_all
se_all <- sqrt(1.5^2*se_men + se_women)
se_all
1.5*0.1
0.15+0.2
se_all
2/54
2*52
104/54
sqrt(104/54)
p1 <- 2/54
p2 <- 52/54
sqrt((p1*(1-p1)) / 54)
ages <- rnorm(2009, 40, 10)
plot(ages)
plot(density(ages))
summary(ages)
ages <- seq(18, 90)
ages <- seq(18, 90, length.out = 2009)
plot(density(ages))
summary(ages)
ages <- round(seq(18, 90, length.out = 2009))
summary(ages)
age10 <- ages/10
age10_2 <- age10 * 2.6
plot(age10, age10_2)
summary(age10_2)
plot(age, age10_2*10)
plot(ages, age10_2*10)
summary(age10_2*10)
157+8.5
157+27.2
157+19
forecast_rep <- .49
survey_rep <- .55
pr_rep_wins <- forecast_rep * (1-forecast_rep) / survey_rep
pr_rep_wins
pr_rep_wins <- forecast_rep * survey_rep / survey_rep
pr_rep_wins
pr_rep_wins <- forecast_rep * survey_rep * forecast_rep / survey_rep
pr_rep_wins
pr_rep_wins <- forecast_rep * survey_rep / survey_rep
pr_rep_wins
pr_rep_wins <- survey_rep * forecast_rep / survey_rep
pr_rep_wins
pr_rep_wins <- survey_rep * forecast_rep
pr_rep_wins
pr_rep_wins <- survey_rep * forecast_rep * (1-forecast_rep) * (1-survey_rep)
pr_rep_wins
pr_rep_wins <- survey_rep * forecast_rep
pr_rep_wins
a <- (1/10) * (9/10)
b <- (2/10) * (8 / 10)
sqrt(a + b - 2 * (.1*(a*b)))
sqrt((a + b) - (2 * (.1*(a*b))))
(a + b)
2 * (.1*(a*b))
sqrt((a + b) - (2 * (.1*(a*b))))
sqrt((a + b) - (2 * ((3/10)*(a*b))))
sqrt((a + b) - (2 * ((3/10)*(a*b))))
args(matrix)
l.t <- matrix(data = 1, nrow = n, ncol = 1)
```{r}
n <- 1
t <- 4
nt <- n * t
l.t <- matrix(data = 1, nrow = n, ncol = 1)
l.t
args(apply)
l.t <- matrix(data = 1, nrow = n, ncol = 1, byrow = TRUE)
l.t
l.t <- matrix(data = 1, nrow = t, ncol = 1, byrow = TRUE)
l.t
l.t <- matrix(data = 1, nrow = t, ncol = 1, byrow = FALSE)
l.t
l.t <- matrix(data = 1, nrow = t, ncol = 1)
l.t
l.n <- matrix(data = 1, nrow = n, ncol = 1)
l.nt <- matrix(data = 1, nrow = nt, ncol = 1)
l.nt
dim(diag(3))
diag(10, 3, 4) # guess what?
I.n <- diag(1, n, n)
I.t <- diag(1, t, t)
I.n
I.t
args(kronecker)
n <- 6
t <- 4
nt <- n * t
```
2. Use the matrix command to create a t × 1 vector of ones, called l.t. Similarly, create an n × 1 vector of ones called l.n and an nt × 1 vector of ones called l.nt. (5 points)
```{r}
l.t <- matrix(data = 1, nrow = t, ncol = 1)
l.n <- matrix(data = 1, nrow = n, ncol = 1)
l.nt <- matrix(data = 1, nrow = nt, ncol = 1)
```
3. Using the diag command, create an n × n identity matrix, called I.n and an t × t identity matrix, called I.t. (5 points)
```{r}
I.n <- diag(1, n, n)
I.t <- diag(1, t, t)
idums <- kronecker(I.n, I.t)
idums
I.n
I.t
idums
idums
dims(idums)
dim(idums)
I.n %x% I.t
I.n %x% I.t
t(idums) %*% idums
idums <- kronecker(l.nt, I.t)
idums
idums <- kronecker(l.n, I.t)
idums <- kronecker(l.n, I.t)
idums
solve( t(idums) %*% idums )
solve( t(idums) %*% idums )
tdums <- kronecker(l.t, I.n)
tdums
tdums <- kronecker(l.t, I.t)
tdums
tdums <- kronecker(l.n, I.t)
tdums
idums <- kronecker(l.t, I.n)
idums
solve( t(idums) %*% idums )
idums <- kronecker(l.t, I.n)
solve( t(idums) %*% idums )
```
solve( t(idums) * idums )
solve( t(idums) * idums )
solve( idums %*% idums )
solve( idums %*% idums )
solve( t(idums) %*% idums )
t(idums) %*% idums
idums <- kronecker(l.t, I.n)
solve( t(tdums) %*% tdums )
tidums <- cbind(idums, tdums)
solve( t(tidums) %*% tidums )
tidums <- cbind(idums, tdums)
tidums
solve( t(tidums) %*% tidums )
library(foreign)
install.packages("foreign")
install.packages("foreign")
library(foreign)
mydata = read.dta("http://dss.princeton.edu/training/Panel101.dta")
View(mydadta)
View(mydata)
mydata$time = ifelse(mydata$year >= 1994, 1, 0)
View(mydata)
l.t
l.t
l.n
idums
library(gdata)
install.packages("gdata")
install.packages("gdata")
library(gdata)
library(readr)
setwd("/Users/jsk474/Google Drive/QMSS/QMSS-Fall2016/Thesis/data_sales")
list.files("/Users/jsk474/Google Drive/QMSS/QMSS-Fall2016/Thesis/data_sales")
nysls_2011 <- read.xls("2011_manhattan.xls", pattern = "BOROUGH")
View(nysls_2011)
str(nysls_2011$SALE.DATE)
